--@name Fin3 Mouse Aim v3.4.2
--@author Cheezus
--@shared
--@include lib/pid4.txt

-- DO NOT EDIT ANYTHING IN HERE!
-- Do all configuration in the config chip and wire this chip to it

if SERVER then
    wire.adjustPorts({
        Config = "table",
        Active = "number",
        Base = "entity",
        Seat = "entity",
        PitchUp = "number",
        PitchDown = "number",
        YawLeft = "number",
        YawRight = "number",
        RollLeft = "number",
        RollRight = "number",
        ToggleThirdPerson = "number",
        ToggleZoom = "number",
        FreeLook = "number",
        IncreaseThrottle = "number",
        DecreaseThrottle = "number"
    }, {
        Pitch = "number",
        Yaw = "number",
        Roll = "number",
        Throttle = "number"
    })

    local stringLower = string.lower
    local rad2deg, atan2 = (180 / math.pi), math.atan2
    local clamp, sign, abs, approach, max, round = math.clamp, math.sign, math.abs, math.approach, math.max, math.round
    local cos, acos = math.cos, math.acos
    local remap, lerp = math.remap, math.lerp
    local inputs = {
        pitchup = 0,
        pitchdown = 0,
        yawleft = 0,
        yawright = 0,
        rollleft = 0,
        rollright = 0,
        increasethrottle = 0,
        decreasethrottle = 0
    }
    local pitchOut, yawOut, rollOut = 0, 0, 0
    local vector_up = Vector(0, 0, 1)
    local freelook = false
    local throttle = 0
    local fwdAxis, upAxis, rightAxis, pitchKp, pitchKi, pitchKiMax, pitchKd, pitchMaxDeflection, pitchDeflectionRate
    local yawKp, yawKi, yawKiMax, yawKd, yawMaxDeflection, yawDeflectionRate
    local rollKp, rollKi, rollKiMax, rollKd, rollMaxDeflection, rollDeflectionRate, rollReturn, rollManualRate
    local throttleMax, throttleRate, idealSpeed
    local pid = require("lib/pid4.txt")
    local dt = game.getTickInterval()

    local function updateConfig()
        local config = wire.ports.Config or {}

        fwdAxis = config.fwdAxis or Vector(1, 0, 0)
        upAxis = config.upAxis or Vector(0, 0, 1)
        rightAxis = fwdAxis:cross(upAxis)

        pitchKp = config.pitchKp or 4
        pitchKi = config.pitchKi or 0
        pitchKiMax = config.pitchKiMax or 0
        pitchKd = config.pitchKd or 30
        pitchMaxDeflection = config.pitchMaxDeflection or 15
        pitchDeflectionRate = config.pitchDeflectionRate or 200

        yawKp = config.yawKp or 4
        yawKi = config.yawKi or 0
        yawKiMax = config.yawKiMax or 0
        yawKd = config.yawKd or 30
        yawMaxDeflection = config.yawMaxDeflection or 15
        yawDeflectionRate = config.yawDeflectionRate or 200

        rollKp = config.rollKp or 2
        rollKi = config.rollKi or 0
        rollKiMax = config.rollKiMax or 0
        rollKd = config.rollKd or 30
        rollMaxDeflection = config.rollMaxDeflection or 15
        rollDeflectionRate = config.rollDeflectionRate or 200
        rollReturn = config.rollReturn or 0.075
        rollManualRate = config.rollManualRate or 200

        throttleMax = config.throttleMax or 100
        throttleRate = config.throttleRate or 100

        idealSpeed = config.idealSpeed or 300

        pitchPID = pid.new(pitchKp, pitchKi * dt, pitchKiMax / dt, pitchKd * dt)
        yawPID = pid.new(yawKp, yawKi * dt, yawKiMax / dt, yawKd * dt)
        rollPID = pid.new(rollKp, rollKi * dt, rollKiMax / dt, rollKd * dt)
    end

    local function sendConfig(ply)
        local config = wire.ports.Config or {}

        net.start("sendConfig")
        local configData = bit.compress(von.serialize(config))
        local len = #configData
        net.writeUInt(len, 16)
        net.writeData(configData, len)
        net.send(ply)
    end

    timer.simple(0.1, function()
        updateConfig()
    end)

    net.receive("requestEnts", function(_, ply)
        local base, seat = wire.ports.Base, wire.ports.Seat
        if not isValid(base) or not isValid(seat) then return end

        net.start("sendEnts")
        net.writeEntity(base)
        net.writeEntity(seat)
        net.send(ply)
    end)

    net.receive("requestConfig", function(_, ply)
        if table.count(wire.ports.Config) == 0 then return end

        sendConfig(ply)
    end)

    local configUpdateReady = false
    timer.simple(1, function()
        configUpdateReady = true
    end)

    hook.add("input", "mouseaim_input", function(name, value)
        name = stringLower(name)
        if inputs[name] then inputs[name] = value end

        local seat = wire.ports.Seat
        if name == "togglethirdperson" and value > 0 and isValid(seat) then
            net.start("mouseaim_thirdperson")
            net.send(seat:getDriver())
        end

        if name == "togglezoom" and value > 0 and isValid(seat) then
            net.start("mouseaim_zoom")
            net.send(seat:getDriver())
        end

        if name == "freelook" then
            freelook = value ~= 0
        end

        if name == "config" and table.count(wire.ports.Config) > 0 and configUpdateReady then
            updateConfig()
            sendConfig()

            print(Color(255, 255, 255), "Mouse aim config updated!")
        end
    end)

    -- Returns a number representing the heading of a vector when projected onto a plane, relative to its x and y axis
    local function projectGetAngle(v, normAxis, xAxis, yAxis)
        local projection = v:dot(normAxis) * normAxis
        local projectedVector = (v - projection):getNormalized()
        local xComponent = projectedVector:dot(xAxis)
        local yComponent = projectedVector:dot(yAxis)

        return atan2(xComponent, yComponent) * rad2deg
    end

    local aimVector = Vector()
    net.receive("mouseaim_aimvector", function()
        if not freelook then
            aimVector = Vector(net.readFloat(), net.readFloat(), net.readFloat())
        end
    end)

    hook.add("tick", "mouseaim_think", function()
        local base, seat = wire.ports.Base, wire.ports.Seat
        if not fwdAxis or not isValid(base) or not isValid(seat) or wire.ports.Active == 0 then
            pitchOut = 0
            yawOut = 0
            rollOut = 0

            wire.ports.Pitch = 0
            wire.ports.Yaw = 0
            wire.ports.Roll = 0

            return
        end

        local fwdAxisWorld = base:localToWorldVector(fwdAxis)
        local upAxisWorld = base:localToWorldVector(upAxis)
        local rightAxisWorld = base:localToWorldVector(rightAxis)

        local baseRollRads = -atan2(rightAxisWorld:dot(vector_up), upAxisWorld:dot(vector_up))
        local baseRoll = baseRollRads * rad2deg

        local angVel = base:getAngleVelocity()
        local pitchRate = angVel:dot(rightAxis)
        local yawRate = angVel:dot(upAxis)
        local rollRate = angVel:dot(fwdAxis)

        local baseVelKmh = base:getVelocity():getLength() / 10.9361
        local effectivenessRatio = clamp((baseVelKmh / idealSpeed) ^ 2, 0.5, 5)

        local elevation = projectGetAngle(aimVector, rightAxisWorld, upAxisWorld, fwdAxisWorld)

        local heading
        if fwdAxisWorld:dot(aimVector) > 0 then
            heading = projectGetAngle(aimVector, upAxisWorld, rightAxisWorld, fwdAxisWorld)
        else
            heading = projectGetAngle(aimVector, upAxisWorld, rightAxisWorld, -fwdAxisWorld)
        end

        local aimVectorLeft = aimVector:rotateAroundAxis(vector_up, 90)
        aimVectorLeft.z = 0
        local aimVectorLeft = aimVectorLeft:getNormalized()
        local aimVectorUp = aimVector:cross(aimVectorLeft)
        local elevationAboveCamPlane = acos(fwdAxisWorld:dot(aimVectorUp)) * rad2deg - 90

        local elevation2 = elevationAboveCamPlane * abs(cos(baseRollRads))
        if abs(baseRoll) > 90 then elevation2 = -elevation2 end
        local heading2 = -elevationAboveCamPlane * sign(baseRoll)

        local rollCorrectionFactor = abs(baseRoll / 90)
        if rollCorrectionFactor > 1 then rollCorrectionFactor = 1 - (rollCorrectionFactor - 1) end

        local correctedHeading = lerp(rollCorrectionFactor^0.5, heading, heading2)

        yawPID:update(0, correctedHeading, nil, -yawRate)

        -- Avoid roll inputs if the aim vector is close to alignment with the plane's forward vector
        local rollCenterFactor = clamp(remap(acos(aimVector:dot(fwdAxisWorld)) * rad2deg, 0, 90, 0, 1), 0, 1)
        local rollTarget
        if aimVector:dot(upAxisWorld) > 0 then
            rollTarget = projectGetAngle(aimVector, fwdAxisWorld, rightAxisWorld, upAxisWorld)
        else
            rollTarget = projectGetAngle(aimVector, fwdAxisWorld, rightAxisWorld, -upAxisWorld)
        end

        -- Try to return the aircraft to level flight - borrowed from Gaghr's mouse aim
        local unroll = sign(baseRoll) * (abs(clamp(baseRoll, -45, 45)) ^ 0.9) * -rollReturn

        rollPID:update(0, rollTarget * rollCenterFactor, nil, rollRate)

        -- Determine how much the elevation of the aim vector lies on the vertical plane of the aircraft
        local elevationCorrectionFactor = 1 - abs(aimVector:dot(rightAxisWorld))
        elevationCorrectionFactor = elevationCorrectionFactor^2
        local correctedElevation = lerp(elevationCorrectionFactor, elevation2, elevation)

        pitchPID:update(0, correctedElevation, nil, pitchRate)

        local manPitch = (inputs.pitchdown - inputs.pitchup) * pitchMaxDeflection
        local manYaw = (inputs.yawleft - inputs.yawright) * yawMaxDeflection
        local manRoll = (inputs.rollleft - inputs.rollright) * rollMaxDeflection

        local inPitch = manPitch ~= 0 and manPitch or (pitchPID:getValue() / effectivenessRatio)
        local inYaw = manYaw ~= 0 and manYaw or (yawPID:getValue() / effectivenessRatio)

        -- Limit manual roll to the specified maximum roll rate
        local manRollMul = max(abs(-sign(manRoll) * rollManualRate - rollRate) / rollManualRate, 0) ^ 0.5
        local inRoll = manRoll ~= 0 and (manRoll * manRollMul) or (rollPID:getValue() / effectivenessRatio - unroll)

        pitchOut = approach(pitchOut, clamp(inPitch, -pitchMaxDeflection, pitchMaxDeflection), pitchDeflectionRate * dt)
        yawOut = approach(yawOut, clamp(inYaw, -yawMaxDeflection, yawMaxDeflection), yawDeflectionRate * dt)
        rollOut = approach(rollOut, clamp(inRoll, -rollMaxDeflection, rollMaxDeflection), rollDeflectionRate * dt)
        throttle = clamp(throttle + (inputs.increasethrottle - inputs.decreasethrottle) * throttleRate * dt, 0, throttleMax)

        wire.ports.Pitch = pitchOut
        wire.ports.Yaw = yawOut
        wire.ports.Roll = rollOut
        wire.ports.Throttle = round(throttle)
    end)
else
    local traceLine, traceHull = trace.line, trace.hull
    local netStart, netSend = net.start, net.send
    local netWriteFloat = net.writeFloat
    local netReadEntity, netReadUInt, netReadData = net.readEntity, net.readUInt, net.readData
    local renderSetColor, renderSetFont, renderPushViewMatrix, renderPopViewMatrix = render.setColor, render.setFont, render.pushViewMatrix, render.popViewMatrix
    local renderDraw3DLine, renderDrawCircle, renderDrawRectFast, renderDrawSimpleText = render.draw3DLine, render.drawCircle, render.drawRectFast, render.drawSimpleText

    local centerX, centerY = render.getGameResolution()
    centerX = centerX / 2
    centerY = centerY / 2

    local color_black = Color(0, 0, 0)
    local color_red = Color(255, 0, 0)
    local color_green = Color(0, 255, 0)

    -- Default config options
    local showAxes = false
    local fwdAxis = Vector(1, 0, 0)
    local upAxis = Vector(0, 0, 1)

    local camHeightThirdPerson = 150
    local camOffsetPos = Vector(0, 0, camHeightThirdPerson)
    local camDistThirdPerson = 600
    local camPosFirstPersonOverride
    local camPosFirstPerson = Vector()
    local thirdPerson = true
    local defaultFOV = 90
    local zoomFOV = 40

    local enableHUD = true
    local enableHUDFirstPerson = true
    local circleHUD = true
    local outerHUDColor = Color(255, 255, 180)
    local innerHUDColor = Color(255, 255, 180)

    local seatViewPositions = {
        ["models/lubprops/seat/raceseat2.mdl"] = Vector(0, 6.45, 34.4),
        ["models/lubprops/seat/raceseat.mdl"] = Vector(0, 6.45, 34.4),
        ["models/nova/jeep_seat.mdl"] = Vector(0, 2, 37.223),
        ["models/nova/jalopy_seat.mdl"] = Vector(0, 5, 40.172),
        ["models/props_phx/carseat2.mdl"] = Vector(-0.915, -5.323, 27.314),
        ["models/nova/chair_office02.mdl"] = Vector(0, 4, 48.5),
        ["models/nova/airboat_seat.mdl"] = Vector(0, 0, 33.182),
        ["models/vehicles/driver_pod.mdl"] = Vector(-6.061, 0.005, 69.754),
        ["models/vehicles/pilot_seat.mdl"] = Vector(-0.005, -1.998, 36)
    }

    local base, seat

    timer.create("requestEnts", 1, 0, function()
        netStart("requestEnts")
        netSend()
    end)

    timer.create("requestConfig", 1, 0, function()
        netStart("requestConfig")
        netSend()
    end)

    net.receive("sendEnts", function()
        timer.stop("requestEnts")
        base = netReadEntity()
        seat = netReadEntity()

        local seatCamPos = seatViewPositions[seat:getModel()]

        if seatCamPos then
            camPosFirstPerson = base:worldToLocal(seat:localToWorld(seatCamPos))
        end
    end)

    net.receive("sendConfig", function()
        timer.stop("requestConfig")

        local len = netReadUInt(16)
        local configData = bit.decompress(netReadData(len))
        local configTable = von.deserialize(configData)

        if configTable.showAxes ~= nil then
            showAxes = (configTable.showAxes == 1)
        end

        if player() == owner() and showAxes then
            enableHud(owner(), true)
        end

        fwdAxis = configTable.fwdAxis or fwdAxis
        upAxis = configTable.upAxis or upAxis

        camHeightThirdPerson = configTable.camHeightThirdPerson or camHeightThirdPerson
        camOffsetPos = Vector(0, 0, camHeightThirdPerson)
        camDistThirdPerson = configTable.camDistThirdPerson or camDistThirdPerson
        camPosFirstPersonOverride = configTable.camPosFirstPersonOverride
        if configTable.thirdPerson then
            thirdPerson = configTable.thirdPerson == 1
        end
        defaultFOV = configTable.defaultFOV or defaultFOV
        zoomFOV = configTable.zoomFOV or zoomFOV

        if configTable.enableHUD then
            enableHUD = configTable.enableHUD == 1
        end
        if configTable.enableHUDFirstPerson then
            enableHUDFirstPerson = configTable.enableHUDFirstPerson == 1
        end
        if configTable.circleHUD then
            circleHUD = configTable.circleHUD == 1
        end
        outerHUDColor = configTable.outerHUDColor or outerHUDColor
        innerHUDColor = configTable.innerHUDColor or innerHUDColor

        -- print("Client received config (" .. table.count(configTable) .. " values)")
    end)

    if player() == owner() then
        local font = render.createFont("Trebuchet24", 24, nil, false, nil, nil, true)

        hook.add("drawHud", "hud", function()
            if not isValid(base) then return end
            if not showAxes then return end

            local basePos = base:getPos()
            local fwd = base:localToWorld(fwdAxis * 50)
            local up = base:localToWorld(upAxis * 50)

            if owner():getPos():getDistanceSqr(basePos) < 1000000 then
                renderPushViewMatrix({
                    type = "3D"
                })

                renderSetColor(color_red)
                renderDraw3DLine(basePos, fwd)

                renderSetColor(color_green)
                renderDraw3DLine(basePos, up)

                renderPopViewMatrix()

                local fwdScr = fwd:toScreen()
                local upScr = up:toScreen()

                renderSetFont(font)

                renderSetColor(color_red)
                renderDrawSimpleText(fwdScr.x, fwdScr.y, "Forward", 1, 1)

                renderSetColor(color_green)
                renderDrawSimpleText(upScr.x, upScr.y, "Up", 1, 1)
            end
        end)
    end

    local zoom = false

    net.receive("mouseaim_thirdperson", function()
        thirdPerson = not thirdPerson
    end)

    net.receive("mouseaim_zoom", function()
        zoom = not zoom
    end)

    local camHull = Vector(4)
    local aimVector = Vector()
    local lastAimVector = Vector()

    hook.add("tick", "mouseaim_aimvector", function()
        if not isValid(base) or not isValid(seat) then return end
        if player():getVehicle() ~= seat then return end

        if aimVector ~= lastAimVector and net.getBytesLeft() > 16 then
            netStart("mouseaim_aimvector")
            netWriteFloat(aimVector.x)
            netWriteFloat(aimVector.y)
            netWriteFloat(aimVector.z)
            netSend(nil, true)

            lastAimVector = aimVector
        end
    end)

    hook.add("calcview", "mouseaim_camera", function()
        if not isValid(base) or not isValid(seat) then return end
        if player():getVehicle() ~= seat then return end

        local basePos = base:getPos()
        local curAng = player():getEyeAngles()
        aimVector = curAng:getForward()
        local camPos

        if thirdPerson then
            local camCenter = basePos + camOffsetPos
            camPos = camCenter - aimVector * camDistThirdPerson

            local camHitWorldTrace = traceHull(camCenter, camPos, -camHull, camHull, nil, MASK.SOLID_BRUSHONLY)

            if camHitWorldTrace.Hit then
                camPos = camHitWorldTrace.HitPos
            end
        else
            camPos = base:localToWorld(camPosFirstPersonOverride or camPosFirstPerson)
        end

        local aimPos = traceLine(camPos, camPos + aimVector * 100000, nil, MASK.SOLID_BRUSHONLY).HitPos

        aimVector = (aimPos - basePos):getNormalized() -- Correct for cam height offset by using basePos instead of camPos

        return {
            origin = camPos,
            drawviewer = thirdPerson,
            fov = zoom and zoomFOV or defaultFOV,
            angles = curAng
        }
    end)

    -- For some reason the regular function here requires a valid physobj
    local ENTITY = getMethods("Entity")
    function ENTITY:localToWorldVector(v)
        return self:localToWorld(v) - self:getPos()
    end

    hook.add("drawhud", "mouseaim_hud", function()
        if not enableHUD then return end
        if not isValid(base) or not isValid(seat) then return end
        if player():getVehicle() ~= seat then return end
        if not thirdPerson and not enableHUDFirstPerson then return end
        local basePos = base:getPos()

        renderSetColor(outerHUDColor)
        renderDrawCircle(centerX, centerY, 22)

        local aimPos = traceLine(basePos, basePos + base:localToWorldVector(fwdAxis) * 100000, nil, MASK.SOLID_BRUSHONLY).HitPos:toScreen()
        local aimX = aimPos.x
        local aimY = aimPos.y

        renderSetColor(innerHUDColor)
        if circleHUD then
            renderDrawCircle(aimX, aimY, 8)
            renderDrawCircle(aimX, aimY, 1)
        else
            renderDrawRectFast(aimX - 2, aimY - 20, 4, 16)
            renderDrawRectFast(aimX - 2, aimY + 4, 4, 16)
            renderDrawRectFast(aimX - 20, aimY - 2, 16, 4)
            renderDrawRectFast(aimX + 4, aimY - 2, 16, 4)

            renderSetColor(color_black)
            renderDrawRectOutline(aimX - 2, aimY - 20, 4, 16)
            renderDrawRectOutline(aimX - 2, aimY + 4, 4, 16)
            renderDrawRectOutline(aimX - 20, aimY - 2, 16, 4)
            renderDrawRectOutline(aimX + 4, aimY - 2, 16, 4)
        end
    end)
end
